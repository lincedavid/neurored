#!/usr/bin/python

import random
import numpy
import sys
import os
import shutil
import subprocess

supervised = False
printAllData = True
ones = 0
zeros = 0

class Net:
    def __init__(self, filename):
        self.layers = list()
        self.inputs = list()
        self.epoch = 0
        self.configuration = self.readConfigFile(filename)
        self.size = len(self.configuration)

        for a, config in enumerate(self.configuration):
            self.addLayer(a, config["layerSize"], config["neuronSize"], config["learningRate"])
        return

    def addLayer(self, ID, layerSize, neuronSize, learningRate):
        layer = Layer(ID, layerSize, neuronSize, learningRate)
        self.layers.append(layer)
        return

    def setVector(self, vector):
        self.vector = vector
        return

    def getVector(self, size):
        return self.vector

    def makeDir(self):
        self.path = "./net/"
        if(os.path.exists(self.path)):
            shutil.rmtree(self.path)
        os.mkdir(self.path)
        for layer in self.layers:
            layer.makeDir(self.path)
        return

    def printOutput(self):
        for layer in self.layers:
            layer.printOutput()
        return

    def readConfigFile(self, filename):
        configuration = list()
        with open(filename, "r") as myFile:
            for a, line in enumerate(myFile):
                variables = dict()
                line = [float(value.rstrip("\n")) for value in line.split(",")]
                variables["ID"] = a
                variables["layerSize"] = line[0]
                variables["neuronSize"] = line[1]
                variables["learningRate"] = line[2]
                configuration.append(variables)
        return configuration

    def train(self):
        for layer in self.layers:
            layer.train()
        return

    def start(self, vector):
        self.setVector(vector)
        
        self.inputs.append(vector)
        
        for layer in self.layers:
            #print self.inputs
            self.inputs.append(layer.start(self.inputs[-1]))
            self.inputs[-1].append(-1)
            self.inputs[-1].append(self.inputs[0][-1])
        #print self.inputs[-1][0]
        self.output = self.inputs[-1][0]
        print "[O] Finishing net...\n"
        print "Input >> %s" % (self.vector[:-2])
        print "Response >> %s" % (self.output)
        return


class Layer:
    def __init__(self, ID, layerSize, neuronSize, learningRate):
        self.id = ID
        self.size = int(layerSize)
        self.neurons = list()

        for a in range(self.size):
            self.addNeuron(a, neuronSize, learningRate)    
        return

    def addNeuron(self, ID, neuronSize, learningRate):
        neuron = Neuron(ID, neuronSize, learningRate)
        self.neurons.append(neuron)
        return

    def setVector(self, vector):
        self.vector = vector
        return

    def getVector(self, size):
        return self.vector

    def makeDir(self, path):
        self.path = path + "L" + str(self.id) + "/"
        os.mkdir(self.path)
        for neuron in self.neurons:
            neuron.makeDir(self.path)
        return

    def train(self):
        global printAllData
        for a, neuron in enumerate(self.neurons):
            neuron.train()
        return

    def printOutput(self):
        for neuron in self.neurons:
            neuron.printOutput()
        return

    def start(self, vector):
        self.setVector(vector)
        self.response = list()
        self.activation = list()
        for neuron in self.neurons:
            #print "Pasado a la neurona >> ",self.vector
            response, activation = neuron.start(self.vector)
            self.response.append(response)
            self.activation.append(activation)
        #print "Layer response >> %s" % (self.response)
        #print "Layer activation >> %s" % (self.activation)
        #print "[O] Finishing layer...\n"
        return self.response
    

class Neuron:
    def __init__(self, ID, size, learningRate):
        self.id = ID
        self.size = int(size)
        self.learningRate = learningRate
        self.weights = numpy.array(self.generateWeights(self.size + 1))
        #print "Initial weights >> %s\n" %(self.weights)
        self.threshold = self.weights[-1]
        self.condition = numpy.array(self.generateWeights(self.size + 1))

    def setVector(self, vector):
        self.vector = numpy.array(vector)

    def getVector(self, size):
        return self.vector

    def makeDir(self, path):
        self.path = path + "N" + str(self.id) + "/"
        #print "Neuron path >> ", self.path
        if(not os.path.exists(self.path)):
            os.mkdir(self.path)
        return

    def generateWeights(self, size):
        weights = list()
        for i in range(size):
            weights.append(random.uniform(-1,1))
        return weights

    def calculateActivation(self, weights, vector):
        #print weights
        #print vector
        activation = numpy.dot(weights, vector)
        response = 0 if(activation < 0) else 1
        return activation, response

    def train(self):
        delta = [((self.expectedResponse - self.response) * a ) * self.learningRate for a in self.vector]
        self.weights = [a+b for a,b in zip(self.weights, delta)]
        #print "New weights >> %s\n" %(self.weights)
        return

    def printOutput(self):
        if(self.response == 0):
            filename = self.path + "zeros.txt"
        else:
            filename = self.path + "ones.txt"
        with open(filename, "a") as outputFile:
            line = list(self.vector[:-1])
            line.append(self.response)
            outputFile.write(" ".join(str(a) for a in line) + "\n")

        classification = str(self.response) + str(self.expectedResponse) 
        if(classification == "00"):
            filename = self.path + "00.txt"
        elif(classification == "01"):
            filename = self.path + "01.txt"
        elif(classification == "10"):
            filename = self.path + "10.txt"
        elif(classification == "11"):
            filename = self.path + "11.txt"
        with open(filename, "a") as outputFile:
            line = list(self.vector[:-1])
            line.append(self.response)
            line.append(self.expectedResponse)
            outputFile.write(" ".join(str(a) for a in line) + "\n")
        return

    def start(self, vector):
        self.expectedResponse = int(vector[-1])
        self.setVector(vector[:-1])
        #self.setVector(vector)
        self.activation, self.response = self.calculateActivation(self.weights, self.vector)
        #self.dump, self.expectedResponse = self.calculateActivation(self.condition, self.vector)
        return self.response, self.activation


def verifyConfigFile(filename):
    return True

def verifyInputFile(filename):
    return True

def getMainConfig(filename):
    configuration = dict()
    with open(filename, "r") as inputFile:
        lines = inputFile.readlines()
        line = [float(value.rstrip("\n")) for value in lines[0].split(",")]
        configuration["layerSize"] = line[0]
        configuration["neuronSize"] = line[1]
        configuration["learningRate"] = line[2]
    return configuration

def getInputs(filename):
    inputs = list()
    with open(filename, "r") as inputFile:
        for line in inputFile:
            line = [float(value.rstrip("\n")) for value in line.split(",")]
            inputs.append(line)
    return inputs

def generateInputs(size, quantity, filename):
    # "".join([(",".join([str(random.uniform(-1, 1)) for b in range(size)])) + "\n" for a in range(10)])
    with open(filename, "w") as inputFile:
        for a in range(quantity):
            inputData = [str(random.uniform(-1, 1)) for b in range(size)]
            inputData.append("-1")
            #inputData.append(random.randint(0,1))
            inputFile.write(",".join(str(a) for a in inputData) + "\n")
    return

def main():
    configurationFilename = 0

    if(len(sys.argv) < 4):
        print "[!] 3 argument expected (Net configuration filename, train data filename, test data filename)\n"

    try:
        configurationFilename = sys.argv[1]
        print "[!] Net configuration filename >> %s" % (configurationFilename)
    except:
        print "[X] Error, first argument expected (Net configuration filename not given)\n"
        return
        
    try:
        inputFilename = sys.argv[2]
    except:
        print "[!] Input filename not given, using default [input.dat]\n"
        inputFilename = "input.dat"

    try:
        testFilename = sys.argv[3]
    except:
        print "[!] Input filename not given\n"
        return

    if(configurationFilename):
        if(verifyConfigFile):
            mainConfiguration = getMainConfig(configurationFilename)
            #print mainConfiguration
            print "[!] Searching file %s" % (inputFilename)
            if(os.path.exists(inputFilename)):
                print "[O] %s found" % (inputFilename)
            else:
                print "[O] %s does not found" % (inputFilename)
                print "[O] Generating file %s [5000 inputs]" % (inputFilename)
                generateInputs(int(mainConfiguration["neuronSize"]), 5000, inputFilename)

            if(verifyInputFile(inputFilename)):
                print "[O] File format is correct"
            else:
                print "[X] Error, file format error"
                return
        else:
            print "[X] Error, bad configuration file"
            return

    raw_input("[O] Press any key to continue...\n")

    net = Net(configurationFilename)
    #print net.size
    #print net.configuration

    net.makeDir()

    inputs = getInputs(inputFilename)
    #print inputs
    for vector in inputs:
        net.start(vector)
        net.printOutput()
        net.train()

    raw_input("Termino entrenamiento!\n\n")
    
    with open(testFilename) as inputFile:
        vectors = list()
        for line in inputFile:
            line = [float(value.rstrip("\n")) for value in line.split(",")]
            vectors.append(line)
    print vectors
    #inputs.append(vector)
    
    for vector in vectors:
        net.start(vector)
        #net.printOutput()

    #for layer in net.layers:
    #    for neuron in layer.neurons:
    #        lastPath = os.getcwd()
    #        dst = neuron.path
    #        shutil.copy("./phase1.plot", dst)
    #        shutil.copy("./phase2.plot", dst)
    #        os.chdir(dst)
    #        subprocess.call(["gnuplot", "phase1.plot"])   
    #        subprocess.call(["gnuplot", "phase2.plot"])
    #        os.chdir(lastPath)

if(__name__ == "__main__"):
    main()

# [!] [?] [X] [O] >> <<
